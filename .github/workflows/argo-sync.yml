name: ArgoCD Sync

on:
  workflow_run:
    workflows: ["Release and Build Docker Image"]
    types:
      - completed
    branches:
      - main

jobs:
  notify-argocd:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read

    steps:
      - name: Wait before webhook call
        run: |
          echo "Waiting 30 seconds to prevent overwhelming ArgoCD server..."
          sleep 30

      - name: Validate environment
        run: |
          if [ -z "${{ secrets.ARGOCD_WEBHOOK_SECRET }}" ]; then
            echo "Error: ARGOCD_WEBHOOK_SECRET is not set"
            exit 1
          fi
          echo "Environment validation passed"

      - name: Notify ArgoCD with retry logic
        env:
          ARGOCD_WEBHOOK_SECRET: ${{ secrets.ARGOCD_WEBHOOK_SECRET }}
          ARGOCD_WEBHOOK_URL: https://argo.dev4ever.app/api/webhook
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          set -e
          
          REPO_URL="https://github.com/$GITHUB_REPOSITORY.git"
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)
          REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
          
          echo "Preparing webhook payload..."
          PAYLOAD=$(jq -n \
            --arg ref "$GITHUB_REF" \
            --arg after "$GITHUB_SHA" \
            --arg before "" \
            --arg full_name "$GITHUB_REPOSITORY" \
            --arg clone_url "$REPO_URL" \
            --arg pusher_name "$GITHUB_ACTOR" \
            --arg repo_name "$REPO_NAME" \
            --arg repo_owner "$REPO_OWNER" \
            --arg repo_url "https://github.com/$GITHUB_REPOSITORY" \
            --arg commit_url "https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA" \
            '{
              ref: $ref,
              after: $after,
              before: $before,
              created: false,
              deleted: false,
              forced: false,
              compare: ("https://github.com/" + $full_name + "/compare/" + ($before // "0000000")[0:7] + "..." + $after[0:7]),
              commits: [
                {
                  id: $after,
                  tree_id: $after,
                  message: "Automated deployment sync",
                  timestamp: (now | todate),
                  url: $commit_url,
                  author: {
                    name: $pusher_name,
                    email: ($pusher_name + "@github.actions"),
                    username: $pusher_name
                  },
                  committer: {
                    name: $pusher_name,
                    email: ($pusher_name + "@github.actions"),
                    username: $pusher_name
                  },
                  added: [],
                  removed: [],
                  modified: [],
                  distinct: true
                }
              ],
              head_commit: {
                id: $after,
                tree_id: $after,
                message: "Automated deployment sync",
                timestamp: (now | todate),
                url: $commit_url,
                author: {
                  name: $pusher_name,
                  email: ($pusher_name + "@github.actions"),
                  username: $pusher_name
                },
                committer: {
                  name: $pusher_name,
                  email: ($pusher_name + "@github.actions"),
                  username: $pusher_name
                },
                added: [],
                removed: [],
                modified: [],
                distinct: true
              },
              repository: {
                id: 0,
                name: $repo_name,
                full_name: $full_name,
                owner: {
                  name: $repo_owner,
                  email: ($repo_owner + "@github.com"),
                  login: $repo_owner
                },
                private: false,
                html_url: $repo_url,
                clone_url: $clone_url,
                git_url: ("git://github.com/" + $full_name + ".git"),
                ssh_url: ("git@github.com:" + $full_name + ".git"),
                default_branch: "main",
                master_branch: "main"
              },
              pusher: {
                name: $pusher_name,
                email: ($pusher_name + "@github.actions")
              },
              sender: {
                login: $pusher_name,
                type: "User"
              }
            }')
          
          echo "Enhanced payload created successfully"
          
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "$ARGOCD_WEBHOOK_SECRET" | sed 's/^.* //')
          echo "Signature generated"
          
          # Retry logic with exponential backoff
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES: Calling ArgoCD webhook..."
            
            if curl -X POST "$ARGOCD_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Event: push" \
              -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
              -H "User-Agent: GitHub-Actions-Webhook" \
              -H "X-GitHub-Delivery: $(uuidgen)" \
              -d "$PAYLOAD" \
              --max-time 30 \
              --retry 0 \
              --fail \
              --silent \
              --show-error; then
              echo "✅ Webhook call successful!"
              SUCCESS=true
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                WAIT_TIME=$((RETRY_COUNT * 30))
                echo "❌ Webhook call failed. Waiting ${WAIT_TIME}s before retry..."
                sleep $WAIT_TIME
              else
                echo "❌ All webhook attempts failed. Check ArgoCD server status."
                exit 1
              fi
            fi
          done

      - name: Health check ArgoCD server
        if: failure()
        run: |
          echo "Performing health check on ArgoCD server..."
          if curl -f -s --max-time 10 https://argo.dev4ever.app/healthz > /dev/null 2>&1; then
            echo "✅ ArgoCD server is responding to health checks"
          else
            echo "❌ ArgoCD server is not responding to health checks"
            echo "Please check server logs and status"
          fi